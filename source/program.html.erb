<% @title = "Portland Code School - Program Description" %>
<div class="readable-width">
  <h2 class="line">The Program</h2>
  <p>In the heart of the Peoples Republic of Oregon exists a program. At the head of this program exists a man. Upon his shoulders has been thrust the responsibility of creating eager, intelligent comrades to quell the insatiable thirst for fresh human fodder. This man is called Chuck Lauer Vose. The program is called The Portland Code School. These humans are called Rachel Sakry, Matt Danskey, and Pete Kinnecom.</p>
  <p>Portland Code School exists to solve a scarcity problem that we felt has been growing significantly faster than demand: able-minded programmers who are capable of both programming extremely well and communicating with clients and peers. Burnside Digital, and arguably most tech shops, cannot exist with single-faceted programmers alone; the most valuable among our ranks are those that easily banter with clients and produce outstanding quality code. </p>
  <p>But these individuals do not just grow on trees. We found that there are 3 parts to the problem: Environment, Marketing, and Scarcity. In order to retain employees we must create an outstanding environment with great projects, great benefits, catered lunches, and flexible schedules. In order to attract highly skilled employees from around the world we must push our brand into the minds of programmers through open source work, marketing and pr, and through community engagement. But even that will not be enough, we must also embark upon creating our own top-notch employees.</p>
</div>
<div class="left-col">
  <h2 class="line-half">Structure</h2>
  <p>The program is split into two chunks of 6 weeks. The first half is dedicated to learning as much as possible in as short a time as possible. The latter half is dedicated to hand-on work with a client project, pairing with full-time developers, and extensive code review.</p>
  <p>In addition to teaching, we also follow agile methodologies as soon as possible. We standup each day to recognize what everyone is doing, we demo weekly, and we hold a planning meeting and a retrospective each week.</p>
</div>
<div class="right-col">
  <h2 class="line-half">Fees</h2>
  <p>Portland Code School runs on a very small budget, and as such the current fees for classes are set at $7500, $1000 of which is due at the beginning. Like many code schools, this fee will be refunded if you are accepted at a company in our hiring network.</p>
  <p><strong>We endeavor to not turn any students away purely for financial reasons.</strong> Please contact us if you have concerns about money.</p>
</div>
<div class="left-col">
  <h2 class="line-half">Weeks 1-3</h2>
  <p><strong>Week 1:</strong> We start out with Git and pair programming because we believe they are essential to learning. Then, despite asking candidates to know some Ruby on Rails, we step back and begin learning middleman. This gives us a chance to reflect and find out where there may be missing knowledge about CSS and HTML that can haunt us later.</p>
  <p><strong>Week 2:</strong> Following middleman we begin to work on Sinatra. Sinatra allows us to explore routing in a simplified format, generated content through ERB or Haml, and some simple databases like SQLite3 and yaml.</p>
  <p><strong>Week 3:</strong> Finally, we reach Rails. We begin with a basic install of Rails and use scaffolds to get running. When we decide that scaffolds are insufficient we move quickly onto an admin section using rails_admin or active_admin. Most of this week is spent exploring the inconsistencies between Sinatra and Rails, learning about databases, and learning about assets and the asset pipeline.</p>
</div>
<div class="right-col">
  <h2 class="line-half">Weeks 4-12</h2>
  <p><strong>Week 4:</strong> This week we begin focus on gems and plugins that are essential to any commercial Rails application. We talk about ruby-toolbox.com, how to make gems, and why we use bundler and rvm/rbenv.</p>
  <p><strong>Week 5:</strong> At this point, Rails is becoming easier so we introduce testing and TDD. We begin a schedule of brainstorming quality tests and talk in depth about what certain tests are for. We start with integration tests and move down the stack; these tests end up being harder to write, but easier to comprehend.</p>
  <p><strong>Week 6:</strong> This week is spent on evaluation both of the program and of the students progress. During this time the students continue to work on their projects so that we can compose a portfolio to impress clients.</p>
  <p><strong>Weeks 7-12:</strong> This time is spent working with a client on some small aspect of their project. The focus of this work is to get style guidance and advice from full-time developers. In addition to working with another team, the students continue daily lectures or checkins with the instructor.</p>
</div>